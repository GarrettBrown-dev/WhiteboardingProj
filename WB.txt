//Prompt #3: Compressing Strings
//Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example input: "aaabccc"
Example output: "3ab3c"

Non-recursive: 

function compString(str) {
  let counter = 0;
  let cstr = "";
  for (char in str) {
    if (str.Includes(char)) {
      counter++;
      return counter + char;
    }
    else {
      return cstr;
    }
  }
}

Recursive: //I realized about halfway through i was pretty much doing the same thing here unfortunately. I was a wreck. I'm a bad coder. Dx

function compString(str) {
  i = 0;
  for (str.length)
  {
    if(str.Char === str.Char)
    {
      i++
    }
    else {